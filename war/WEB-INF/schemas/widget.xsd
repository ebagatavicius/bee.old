<?xml version="1.0" encoding="UTF-8"?>
<xs:schema targetNamespace="http://www.butent.com/widget" elementFormDefault="qualified"
  xmlns="http://www.butent.com/widget"
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns:type="http://www.butent.com/type"
  xmlns:ui="http://www.butent.com/ui"
  xmlns:d="http://www.butent.com/decorator"
  >

  <xs:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="xml.xsd" />
  <xs:import namespace="http://www.butent.com/type" schemaLocation="types.xsd" />
  <xs:import namespace="http://www.butent.com/ui" schemaLocation="ui.xsd" />
  <xs:import namespace="http://www.butent.com/decorator" schemaLocation="decorator.xsd" />

  <xs:element name="html" type="xs:string" />
  <xs:element name="text" type="xs:string" />

  <xs:attributeGroup name="visibility">
    <xs:attribute name="visible" type="xs:boolean" />
    <xs:attribute name="module" type="type:module" />
    <xs:attribute name="data" type="type:dataView" />
    <xs:attribute name="for" type="type:nameType" />
  </xs:attributeGroup>

  <xs:complexType name="widgetBase">
    <xs:attributeGroup ref="visibility" />
    <xs:attributeGroup ref="ui:appearance" />
    <xs:attribute name="name" type="xs:normalizedString" />
    <xs:attribute name="parent" type="xs:normalizedString" />
    <xs:attribute name="title" type="xs:string" />
    <xs:attribute name="html" type="xs:string" />
    <xs:attribute name="text" type="xs:string" />
    <xs:attribute name="options" type="xs:normalizedString" />
    <xs:attribute name="disablable" type="xs:boolean" default="true" />
    <xs:attribute name="decorator" type="d:registeredDecorator" />
    <xs:attribute ref="xml:base" />
    <xs:anyAttribute namespace="http://www.butent.com/decorator" processContents="strict" />
  </xs:complexType>

  <xs:complexType name="widgetType">
    <xs:complexContent>
      <xs:extension base="widgetBase">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="properties" type="type:customProperties" />

          <xs:element name="css">
            <xs:complexType>
              <xs:simpleContent>
                <xs:extension base="xs:string">
                  <xs:attribute name="id" type="xs:ID" use="required" />
                </xs:extension>
              </xs:simpleContent>
            </xs:complexType>
          </xs:element>
          
          <xs:element name="dynStyle" type="ui:conditionalStyle" />
          <xs:element name="handler" type="ui:eventHandler" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:element name="widget" type="widgetBase" abstract="true" />
  
  <xs:element name="decorator">
    <xs:complexType>
      <xs:group ref="widgetOrDecorator" minOccurs="1" maxOccurs="1" />
      <xs:attribute name="id" type="d:registeredDecorator" use="required" />
      <xs:attribute ref="xml:base" />
      <xs:anyAttribute namespace="http://www.butent.com/decorator" processContents="strict" />
    </xs:complexType>
  </xs:element>
  
  <xs:group name="widgetOrDecorator">
    <xs:choice>
      <xs:element ref="widget" />
      <xs:element ref="decorator" />
    </xs:choice>
  </xs:group>

  <xs:complexType name="focusableWidget">
    <xs:complexContent>
      <xs:extension base="widgetType">
        <xs:attribute name="tabIndex" type="xs:int" default="0" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="labelType">
    <xs:complexContent>
      <xs:extension base="widgetType">
        <xs:attribute name="horizontalAlignment" type="ui:horizontalAlignmentType" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="display">
    <xs:complexContent>
      <xs:extension base="labelType">
        <xs:choice minOccurs="0" maxOccurs="1">
          <xs:element name="renderer" type="ui:renderer" />
          <xs:element name="render" type="ui:calcType" />
          <xs:element name="renderToken" type="ui:renderableToken" maxOccurs="unbounded" />
        </xs:choice>
        <xs:attribute name="source" type="type:nameType" />
        <xs:attribute name="property" type="type:nameType" />
        <xs:attribute name="format" type="xs:normalizedString" />
        <xs:attribute name="enumKey" type="xs:normalizedString" />
        <xs:attribute name="renderColumns" type="type:nameList" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="focusableDisplay">
    <xs:complexContent>
      <xs:extension base="display">
        <xs:attribute name="tabIndex" type="xs:int" default="0" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="editableWidget">
    <xs:complexContent>
      <xs:extension base="focusableWidget">
        <xs:sequence>
          <xs:element name="editable" type="ui:calcType" minOccurs="0" />
          <xs:element name="validation" type="ui:calcType" minOccurs="0" />
          <xs:element name="carry" type="ui:calcType" minOccurs="0" />
        </xs:sequence>
        <xs:attribute name="source" type="type:nameType" />
        <xs:attribute name="property" type="type:nameType" />
        <xs:attribute name="caption" type="xs:string" />
        <xs:attribute name="readOnly" type="xs:boolean" />
        <xs:attribute name="format" type="xs:normalizedString" />
        <xs:attribute name="horizontalAlignment" type="ui:horizontalAlignmentType" />
        <xs:attribute name="minValue" type="xs:normalizedString" />
        <xs:attribute name="maxValue" type="xs:normalizedString" />
        <xs:attribute name="required" type="xs:boolean" />
        <xs:attribute name="updateMode" type="ui:refreshType" />
        <xs:attribute name="value" type="xs:normalizedString" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="wdType">
    <xs:group ref="widgetOrDecorator" />
  </xs:complexType>

  <xs:group name="wdht">
    <xs:choice>
      <xs:element ref="widget" />
      <xs:element ref="decorator" />
      <xs:element ref="html" />
      <xs:element ref="text" />
    </xs:choice>
  </xs:group>

  <xs:complexType name="wdhtType">
    <xs:group ref="wdht" />
  </xs:complexType>

  <xs:complexType name="headerAndContent">
    <xs:complexContent>
      <xs:extension base="wdhtType">
        <xs:group ref="widgetOrDecorator" />
        <xs:attributeGroup ref="visibility" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="prokaryote">
    <xs:group ref="wdht" />
    <xs:attributeGroup ref="ui:alignment" />
    <xs:attributeGroup ref="ui:dimension" />
    <xs:attributeGroup ref="ui:appearance" />
    <xs:attributeGroup ref="visibility" />
  </xs:complexType>

  <xs:complexType name="cellVector">
    <xs:complexContent>
      <xs:extension base="widgetType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="cell" type="prokaryote" />
          <xs:group ref="wdht" />
        </xs:choice>
        <xs:attributeGroup ref="ui:cellAppearance" />
        <xs:attributeGroup ref="ui:alignment" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="HorizontalPanel" type="cellVector" substitutionGroup="widget" />
  <xs:element name="VerticalPanel" type="cellVector" substitutionGroup="widget" />

  <xs:complexType name="customButton">
    <xs:complexContent>
      <xs:extension base="editableWidget">
        <xs:attribute name="upFace" type="xs:string" />
        <xs:attribute name="downFace" type="xs:string" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Toggle" type="customButton" substitutionGroup="widget" />

  <xs:complexType name="splitPanel">
    <xs:complexContent>
      <xs:extension base="widgetType">
        <xs:sequence>
          <xs:choice minOccurs="1" maxOccurs="unbounded">
            <xs:element name="north" type="splitDirection" />
            <xs:element name="south" type="splitDirection" />
            <xs:element name="west" type="splitDirection" />
            <xs:element name="east" type="splitDirection" />
          </xs:choice>
          <xs:element name="center">
            <xs:complexType>
              <xs:group ref="widgetOrDecorator" />
            </xs:complexType>
          </xs:element>
        </xs:sequence>
        <xs:attribute name="splitterSize" type="xs:unsignedByte" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="splitDirection">
    <xs:group ref="widgetOrDecorator" />
    <xs:attribute name="size" type="xs:positiveInteger" use="required" />
    <xs:attribute name="splitterSize" type="xs:unsignedByte" />
  </xs:complexType>

  <xs:element name="SplitPanel" type="splitPanel" substitutionGroup="widget" />

  <xs:complexType name="layer">
    <xs:complexContent>
      <xs:extension base="wdType">
        <xs:attributeGroup ref="ui:positioning" />
        <xs:attributeGroup ref="ui:dimension" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="layout">
    <xs:complexContent>
      <xs:extension base="widgetType">
        <xs:choice minOccurs="1" maxOccurs="unbounded">
          <xs:element name="layer" type="layer" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="LayoutPanel" type="layout" substitutionGroup="widget" />
  <xs:element name="AbsolutePanel" type="layout" substitutionGroup="widget" />
  <xs:element name="ComplexPanel" type="layout" substitutionGroup="widget" />

  <xs:element name="StackPanel" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="widgetType">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="stack" type="stackElement" />
          </xs:choice>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="stackElement">
    <xs:complexContent>
      <xs:extension base="headerAndContent">
        <xs:attribute name="headerSize" type="type:positiveDecimal" use="required" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="TabbedPages" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="widgetType">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="page" type="headerAndContent" />
          </xs:choice>
          <xs:attribute name="stylePrefix" type="xs:normalizedString" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="Radio" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="editableWidget">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="option" type="xs:normalizedString" />
          </xs:choice>
          <xs:attribute name="vertical" type="xs:boolean" default="false" />
          <xs:attribute name="valueStartIndex" type="xs:int" />
          <xs:attribute name="enumKey" type="xs:normalizedString" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="ListBox" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="editableWidget">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="item" type="xs:normalizedString" />
          </xs:choice>
          <xs:attribute name="multiSelect" type="xs:boolean" />
          <xs:attribute name="allItemsVisible" type="xs:boolean" />
          <xs:attribute name="size" type="xs:positiveInteger" />
          <xs:attribute name="minSize" type="xs:positiveInteger" />
          <xs:attribute name="maxSize" type="xs:positiveInteger" />
          <xs:attribute name="valueNumeric" type="xs:boolean" />
          <xs:attribute name="valueStartIndex" type="xs:int" />
          <xs:attribute name="enumKey" type="xs:normalizedString" />
          <xs:attribute name="defaultDecorator" type="d:registeredDecorator" default="caption-left" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="Link" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="focusableDisplay">
          <xs:attribute name="url" type="xs:anyURI" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="Button" type="focusableDisplay" substitutionGroup="widget" />

  <xs:element name="Image" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="focusableDisplay">
          <xs:attribute name="resource" type="ui:imageResource" />
          <xs:attribute name="url" type="xs:anyURI" />
          <xs:attribute name="alt" type="xs:string" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="CheckBox" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="editableWidget">
          <xs:attribute name="checked" type="xs:boolean" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="InternalLink" type="labelType" substitutionGroup="widget" />

  <xs:element name="Label" type="labelType" substitutionGroup="widget" />
  <xs:element name="InlineLabel" type="labelType" substitutionGroup="widget" />

  <xs:complexType name="valueLabel">
    <xs:complexContent>
      <xs:extension base="display">
        <xs:attribute name="inline" type="xs:boolean" />
        <xs:attribute name="caption" type="xs:string" />
        <xs:attribute name="defaultDecorator" type="d:registeredDecorator" default="caption-left" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="TextLabel" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="valueLabel">
          <xs:attribute name="textOnly" type="xs:boolean" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="IntegerLabel" type="valueLabel" substitutionGroup="widget" />
  <xs:element name="LongLabel" type="valueLabel" substitutionGroup="widget" />
  <xs:element name="DoubleLabel" type="valueLabel" substitutionGroup="widget" />
  <xs:element name="CurrencyLabel" type="valueLabel" substitutionGroup="widget" />

  <xs:element name="DecimalLabel" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="valueLabel">
          <xs:attribute name="scale" type="xs:unsignedByte" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="DateLabel" type="valueLabel" substitutionGroup="widget" />
  <xs:element name="DateTimeLabel" type="valueLabel" substitutionGroup="widget" />

  <xs:element name="Meter" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="display">
          <xs:attribute name="min" type="xs:double" use="required" />
          <xs:attribute name="max" type="xs:double" use="required" />
          <xs:attribute name="low" type="xs:double" />
          <xs:attribute name="high" type="xs:double" />
          <xs:attribute name="optimum" type="xs:double" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="Progress" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="display">
          <xs:attribute name="max" type="type:positiveDecimal" />
          <xs:attribute name="value" type="type:nonNegativeDecimal" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="Svg" type="display" substitutionGroup="widget" />
  <xs:element name="Canvas" type="display" substitutionGroup="widget" />

  <xs:complexType name="mediaWidget">
    <xs:complexContent>
      <xs:extension base="display">
        <xs:attribute name="url" type="xs:anyURI" />
        <xs:attribute name="autoplay" type="xs:boolean" />
        <xs:attribute name="controls" type="xs:boolean" default="true" />
        <xs:attribute name="currentTime" type="type:positiveDecimal" />
        <xs:attribute name="defaultPlaybackRate" type="type:positiveDecimal" />
        <xs:attribute name="loop" type="xs:boolean" />
        <xs:attribute name="muted" type="xs:boolean" />
        <xs:attribute name="playbackRate" type="type:positiveDecimal" />
        <xs:attribute name="preload">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="auto" />
              <xs:enumeration value="metadata" />
              <xs:enumeration value="none" />
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="volume">
          <xs:simpleType>
            <xs:restriction base="xs:double">
              <xs:minInclusive value="0" />
              <xs:maxInclusive value="1" />
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Audio" type="mediaWidget" substitutionGroup="widget" />
  <xs:element name="Video" type="mediaWidget" substitutionGroup="widget" />

  <xs:complexType name="hasChildren">
    <xs:complexContent>
      <xs:extension base="widgetType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:group ref="widgetOrDecorator" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="FlowPanel" type="hasChildren" substitutionGroup="widget" />
  <xs:element name="SpanPanel" type="hasChildren" substitutionGroup="widget" />

  <xs:complexType name="eukaryote">
    <xs:complexContent>
      <xs:extension base="prokaryote">
        <xs:attribute name="colSpan" type="xs:positiveInteger" />
        <xs:attribute name="rowSpan" type="xs:positiveInteger" />
        <xs:attribute name="wordWrap" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Table" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="widgetType">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="col">
              <xs:complexType>
                <xs:attribute name="index" type="xs:nonNegativeInteger" use="required" />
                <xs:attribute name="width" type="type:positiveDecimal" />
                <xs:attribute name="widthUnit" type="ui:cssUnit" />
                <xs:attributeGroup ref="ui:appearance" />
                <xs:attributeGroup ref="ui:cellAppearance" />
              </xs:complexType>
            </xs:element>

            <xs:element name="row">
              <xs:complexType>
                <xs:choice minOccurs="0" maxOccurs="unbounded">
                  <xs:element name="cell" type="eukaryote" />
                  <xs:group ref="wdht" />
                </xs:choice>
                <xs:attribute name="verticalAlignment" type="ui:verticalAlignmentType" />
                <xs:attributeGroup ref="ui:appearance" />
                <xs:attributeGroup ref="visibility" />
              </xs:complexType>
            </xs:element>

            <xs:group ref="wdht" />
          </xs:choice>

          <xs:attributeGroup ref="ui:cellAppearance" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="gridType">
    <xs:complexContent>
      <xs:extension base="widgetType">
        <xs:attribute name="gridName" type="type:nameType" />
        <xs:attribute name="caption" type="xs:string" />
        <xs:attribute name="filter" type="xs:normalizedString" />
        <xs:attribute name="currentUserFilter" type="type:nameType" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="ChildGrid" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="gridType">
          <xs:attribute name="relColumn" type="type:nameType" use="required" />
          <xs:attribute name="source" type="type:nameType" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="GridPanel" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="gridType">
          <xs:attribute name="child" type="xs:boolean" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="hasOneChild">
    <xs:complexContent>
      <xs:extension base="widgetType">
        <xs:group ref="widgetOrDecorator" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="SimplePanel" type="hasOneChild" substitutionGroup="widget" />
  <xs:element name="SimpleInlinePanel" type="hasOneChild" substitutionGroup="widget" />

  <xs:element name="ResizePanel" type="hasOneChild" substitutionGroup="widget" />

  <xs:element name="ScrollPanel" type="hasOneChild" substitutionGroup="widget" />

  <xs:element name="Frame" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="display">
          <xs:attribute name="url" type="xs:anyURI" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="HeaderContentFooter" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="widgetType">
          <xs:sequence>
            <xs:element name="header" type="wdType" minOccurs="0" />
            <xs:element name="content" type="wdType" />
            <xs:element name="footer" type="wdType" minOccurs="0" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:complexType name="inputWidget">
    <xs:complexContent>
      <xs:extension base="editableWidget">
        <xs:attribute name="defaultDecorator" type="d:registeredDecorator" default="caption-left" />
        <xs:attribute name="onFocus" type="ui:focusAction" />
        <xs:attribute name="placeholder" type="xs:normalizedString" />
        <xs:attribute name="maxLength" type="xs:positiveInteger" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="InputText" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="inputWidget">
          <xs:attribute name="upperCase" type="xs:boolean" />
          <xs:attributeGroup ref="ui:autocomplete" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="InputArea" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="editableWidget">
          <xs:attributeGroup ref="ui:textArea" />
          <xs:attribute name="defaultDecorator" type="d:registeredDecorator"
            default="caption-left-cell" />
          <xs:attribute name="onFocus" type="ui:focusAction" />
          <xs:attribute name="placeholder" type="xs:normalizedString" />
          <xs:attributeGroup ref="ui:autocomplete" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="quantizedInput">
    <xs:complexContent>
      <xs:extension base="inputWidget">
        <xs:attribute name="step" type="xs:positiveInteger" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="InputInteger" type="quantizedInput" substitutionGroup="widget" />

  <xs:element name="InputLong" type="inputWidget" substitutionGroup="widget" />
  <xs:element name="InputDouble" type="inputWidget" substitutionGroup="widget" />

  <xs:element name="InputDecimal" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="inputWidget">
          <xs:attribute name="scale" type="xs:unsignedByte" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="InputCurrency" type="inputWidget" substitutionGroup="widget" />

  <xs:element name="InputSpinner" type="quantizedInput" substitutionGroup="widget" />
  <xs:element name="InputRange" type="quantizedInput" substitutionGroup="widget" />

  <xs:element name="InputDate" type="quantizedInput" substitutionGroup="widget" />
  <xs:element name="InputDateTime" type="quantizedInput" substitutionGroup="widget" />

  <xs:element name="InputTime" type="quantizedInput" substitutionGroup="widget" />
  <xs:element name="InputTimeOfDay" type="quantizedInput" substitutionGroup="widget" />

  <xs:complexType name="spinnerBase">
    <xs:complexContent>
      <xs:extension base="quantizedInput">
        <xs:attribute name="min" type="xs:long" use="required" />
        <xs:attribute name="max" type="xs:long" use="required" />
        <xs:attribute name="minStep" type="xs:positiveInteger" />
        <xs:attribute name="maxStep" type="xs:positiveInteger" />
        <xs:attribute name="constrained" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="VolumeSlider" type="spinnerBase" substitutionGroup="widget" />

  <xs:element name="SliderBar" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="inputWidget">
          <xs:attribute name="min" type="xs:double" use="required" />
          <xs:attribute name="max" type="xs:double" use="required" />
          <xs:attribute name="step" type="xs:double" use="required" />
          <xs:attribute name="numLabels" type="xs:nonNegativeInteger" />
          <xs:attribute name="numTicks" type="xs:nonNegativeInteger" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="selectorType">
    <xs:complexContent>
      <xs:extension base="inputWidget">
        <xs:sequence>
          <xs:choice minOccurs="0" maxOccurs="1">
            <xs:element name="renderer" type="ui:renderer" />
            <xs:element name="render" type="ui:calcType" />
            <xs:element name="renderToken" type="ui:renderableToken" maxOccurs="unbounded" />
          </xs:choice>
          <xs:group ref="ui:selector" minOccurs="0" maxOccurs="1" />
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="selectorColumn" type="ui:selectorColumn" />
          </xs:choice>
        </xs:sequence>
        <xs:attributeGroup ref="ui:relation" />
        <xs:attribute name="label" type="xs:string" />
        <xs:attribute name="enumKey" type="xs:normalizedString" />
        <xs:attribute name="renderColumns" type="type:nameList" />
        <xs:attribute name="upperCase" type="xs:boolean" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="DataSelector" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="selectorType">
          <xs:attribute name="viewName" type="type:dataView" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="MultiSelector" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="selectorType">
          <xs:attribute name="viewName" type="type:dataView" use="required" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="ChildSelector" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="selectorType">
          <xs:attribute name="viewName" type="type:dataView" use="required" />
          <xs:attribute name="childTable" type="type:nameType" use="required" />
          <xs:attribute name="targetRelColumn" type="type:nameType" use="required" />
          <xs:attribute name="sourceRelColumn" type="type:nameType" use="required" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="UnboundSelector" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="selectorType">
          <xs:attribute name="viewName" type="type:dataView" use="required" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="HtmlPanel" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="widgetBase">
          <xs:sequence minOccurs="1" maxOccurs="unbounded">
            <xs:any processContents="lax" />
          </xs:sequence>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="Disclosure" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="widgetType">
          <xs:choice minOccurs="0" maxOccurs="2">
            <xs:group ref="widgetOrDecorator" />
          </xs:choice>
          <xs:attribute name="animate" type="xs:int" />
          <xs:attribute name="open" type="xs:boolean" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="DataTree" type="dataTree" substitutionGroup="widget" />

  <xs:complexType name="dataTree">
    <xs:complexContent>
      <xs:extension base="focusableWidget">
        <xs:sequence>
          <xs:element name="calc" type="ui:calcType" minOccurs="0" maxOccurs="1" />
          <xs:element name="form" type="hasOneChild" minOccurs="0" maxOccurs="1" />
        </xs:sequence>
        <xs:attribute name="caption" type="xs:string" use="required" />
        <xs:attribute name="viewName" type="type:dataView" use="required" />
        <xs:attribute name="parentColumn" type="type:fieldNameType" use="required" />
        <xs:attribute name="orderColumn" type="type:fieldNameType" />
        <xs:attribute name="hideActions" type="xs:boolean" />
        <xs:attribute name="favorite" type="xs:normalizedString" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Tree" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="focusableWidget">
          <xs:sequence>
            <xs:element ref="TreeItem" minOccurs="0" maxOccurs="unbounded" />
          </xs:sequence>
          <xs:attribute name="caption" type="xs:string" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="TreeItem">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="TreeItem" minOccurs="0" maxOccurs="unbounded" />
      </xs:sequence>
      <xs:attribute name="html" type="xs:normalizedString" use="required" />
      <xs:attribute name="text" type="xs:string" />
    </xs:complexType>
  </xs:element>

  <xs:complexType name="hasName">
    <xs:complexContent>
      <xs:restriction base="widgetType">
        <xs:attribute name="name" type="xs:normalizedString" use="required" />
      </xs:restriction>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="Custom" type="hasName" substitutionGroup="widget" />
  <xs:element name="CustomChild" type="hasName" substitutionGroup="widget" />

  <xs:element name="CustomDisplay" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:restriction base="display">
          <xs:attribute name="name" type="xs:normalizedString" use="required" />
        </xs:restriction>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="CustomEditable" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:restriction base="editableWidget">
          <xs:attribute name="name" type="xs:normalizedString" use="required" />
        </xs:restriction>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="CustomFocusable" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:restriction base="focusableWidget">
          <xs:attribute name="name" type="xs:normalizedString" use="required" />
        </xs:restriction>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="br" type="widgetType" substitutionGroup="widget" />
  <xs:element name="hr" type="widgetType" substitutionGroup="widget" />

  <xs:element name="InputFile" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="widgetType">
          <xs:attribute name="multiple" type="xs:boolean" />
          <xs:attribute name="accept" type="xs:normalizedString" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="fileList">
    <xs:complexContent>
      <xs:extension base="widgetType">
        <xs:attribute name="visibleColumns" type="type:fileInfoColumns" />
        <xs:attribute name="editableColumns" type="type:fileInfoColumns" />
        <xs:attributeGroup ref="ui:cellAppearance" />
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="FileGroup" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="fileList">
          <xs:attribute name="property" type="type:nameType" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="buttonFace">
    <xs:attribute name="html" type="xs:string" />
    <xs:attribute name="text" type="xs:string" />
    <xs:attribute name="resource" type="ui:imageResource" />
    <xs:attribute name="url" type="xs:anyURI" />
    <xs:attributeGroup ref="ui:appearance" />
  </xs:complexType>

  <xs:element name="FileCollector" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="fileList">
          <xs:sequence>
            <xs:element name="face" type="buttonFace" minOccurs="0" maxOccurs="1" />
          </xs:sequence>
          <xs:attribute name="accept" type="xs:normalizedString" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="TabBar" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="display">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element name="tab" type="wdhtType" />
          </xs:choice>
          <xs:attribute name="stylePrefix" type="xs:normalizedString" />
          <xs:attribute name="vertical" type="xs:boolean" />
          <xs:attributeGroup ref="ui:cellAppearance" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="htmlList">
    <xs:complexContent>
      <xs:extension base="widgetType">
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="item" type="xs:normalizedString" />
        </xs:choice>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="OrderedList" type="htmlList" substitutionGroup="widget" />
  <xs:element name="UnorderedList" type="htmlList" substitutionGroup="widget" />

  <xs:element name="RichTextEditor" type="display" substitutionGroup="widget" />

  <xs:element name="Flag" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="widgetType">
          <xs:attribute name="source" type="type:nameType" />
          <xs:attribute name="country" type="xs:normalizedString" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="ColorEditor" type="inputWidget" substitutionGroup="widget" />

  <xs:element name="Heading" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="widgetType">
          <xs:attribute name="rank" use="required">
            <xs:simpleType>
              <xs:restriction base="xs:positiveInteger">
                <xs:maxInclusive value="6" />
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="div" type="widgetType" substitutionGroup="widget" />

  <xs:element name="FieldSet" type="hasChildren" substitutionGroup="widget" />
  <xs:element name="Legend" type="widgetType" substitutionGroup="widget" />

  <xs:element name="RowIdLabel" type="valueLabel" substitutionGroup="widget" />

  <xs:element name="Details" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="hasChildren">
          <xs:attribute name="open" type="xs:boolean" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="Summary" type="widgetType" substitutionGroup="widget" />

  <xs:element name="FaLabel" substitutionGroup="widget">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="labelType">
          <xs:attribute name="char" type="ui:fontAwesome" use="required" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

</xs:schema>
